package com.leetcode.hard;

/**
 * 
 * Question：
 * 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
 * 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
 * 注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 * 示例 1:
 * 输入: [3,3,5,0,0,3,1,4]
 * 输出: 6
 * 解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
 * 随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
 * 示例 2:
 * 输入: [1,2,3,4,5]
 * 输出: 4
 * 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   
 * 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   
 *  因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 *  示例 3:
 *  输入: [7,6,4,3,1] 
 *  输出: 0 
 *  解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。
 * Title: BestTimetoBuyIII_123
 * @date 2018年6月27日
 * @author Freedom0013
 */
public class BestTimetoBuyIII_123 {
	public static void main(String[] args) {
		int[] prices = {3,3,5,0,0,3,1,4};
		System.out.println(maxProfit(prices));
	}
	
	/**
	 * 计算最大利润
	 * @param prices 每日价格数组
	 * @return 最大利润
	 */
	public static int maxProfit(int[] prices) {
		if (prices == null) {
			return 0;
		}
		if (prices.length < 2) {
			return 0;
		}
		int result = 0;
		int Max = 0;
		for (int i = 0; i < prices.length; i++) {
			int pricesMin = prices[0];
			int pricesMax = 0;
			for (int j = 1; j < i; j++) {
				pricesMax = Math.max(pricesMax, prices[j] - pricesMin);
				pricesMin = Math.min(pricesMin, prices[j]);
			}

			Max = pricesMax;
			pricesMin = prices[i];
			pricesMax = 0;
			for (int k = i + 1; k < prices.length; k++) {
				pricesMax = Math.max(pricesMax, prices[k] - pricesMin);
				pricesMin = Math.min(pricesMin, prices[k]);
			}

			Max += pricesMax;
			result = Math.max(Max, result);
		}
		return result;
	}
}
